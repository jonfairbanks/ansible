---
- hosts: testers
  gather_facts: yes
  #serial: 1 # Set the number of hosts ansible should manage at any given time (default is all hosts)
  tasks:
    #- debug: var=ansible_facts

    - name: Setup authorized SSH key w/ existing key
      authorized_key:
        user: "{{ ansible_user_id }}"
        state: present
        key: "{{ lookup('file', '/home/{{ ansible_user_id }}/.ssh/id_rsa.pub') }}"

    - name: Checking for updates
      become: yes
      apt: update_cache=yes

    - name: Upgrading system apps
      become: yes
      apt: upgrade=dist

    - name: Install Packages
      become: yes
      apt:
        pkg:
          - fail2ban
          - curl
          - apt-transport-https
          - nmap
          - git
          - python
          - python-apt
          - python-pip
          - python3-pip
          - unattended-upgrades
          - ufw

    - name: Add the apt signing key for Kubernetes
      become: yes
      apt_key:
        url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
        state: present
  
    - name: Add apt repository for Kubernetes
      become: yes
      apt_repository:
        repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
        state: present
        filename: kubernetes.list
  
    - name: Install Kubernetes kubectl
      become: yes
      apt: 
        name: kubectl
        state: present
        update_cache: yes

    - name: Install nvm
      shell: >
        curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.2/install.sh | bash
      args:
        creates: "{{ ansible_env.HOME }}/.nvm/nvm.sh"

    - name: Setup nvm
      shell: |
        export NVM_DIR="$([ -z "${XDG_CONFIG_HOME-}" ] && printf %s "${HOME}/.nvm" || printf %s "${XDG_CONFIG_HOME}/nvm")"
        [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" # This loads nvm

    - name: Install Node.js and set default version
      shell: >
        nvm install 0.10 && nvm alias default 0.10
      args:
        creates: "{{ ansible_env.HOME }}/.nvm/alias"

    - name: Add Docker GPG apt Key
      become: yes
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker Repository
      become: yes
      apt_repository:
        repo: deb https://download.docker.com/linux/ubuntu bionic stable
        state: present

    - name: Update apt and install docker-ce
      become: yes
      apt: update_cache=yes name=docker-ce state=latest

    - name: Verify fail2ban started
      service:
        name=fail2ban
        state=started
        enabled=yes

    - name: Check if reboot is required
      stat:
        path: /var/run/reboot-required
      register: reboot_required_file
  
    # ref http://stackoverflow.com/a/35169496
    - name: Notify of pending reboot
      pause:
        prompt: "Press ENTER to reboot {{ item }} now, or Ctrl+C to abort."
      when: "'reboot_required_file' in hostvars[item] and hostvars[item]['reboot_required_file'].stat.exists"
      with_items: "{{ play_hosts }}"
    
    # ref https://support.ansible.com/hc/en-us/articles/201958037-Reboot-a-server-and-wait-for-it-to-come-back
    - name: Rebooting machine
      shell: sleep 2 && shutdown -r now "Ansible updates triggered"
      async: 1
      poll: 0
      ignore_errors: true
      when: reboot_required_file.stat.exists
    
    - name: Waiting for the machine to come back
      local_action: wait_for host={{ ansible_host }} state=started port=22 delay=30
      become: no
      when: reboot_required_file.stat.exists

    - name: Verify node uptime
      shell: "uptime"
      register: uptime

    - debug: var=uptime.stdout_lines
